/* tslint:disable */
/* eslint-disable */
/**
 * TMDB API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { MovieDetails200ResponseProductionCompaniesInner } from './MovieDetails200ResponseProductionCompaniesInner';
import {
    MovieDetails200ResponseProductionCompaniesInnerFromJSON,
    MovieDetails200ResponseProductionCompaniesInnerFromJSONTyped,
    MovieDetails200ResponseProductionCompaniesInnerToJSON,
    MovieDetails200ResponseProductionCompaniesInnerToJSONTyped,
} from './MovieDetails200ResponseProductionCompaniesInner';
import type { MovieDetails200ResponseProductionCountriesInner } from './MovieDetails200ResponseProductionCountriesInner';
import {
    MovieDetails200ResponseProductionCountriesInnerFromJSON,
    MovieDetails200ResponseProductionCountriesInnerFromJSONTyped,
    MovieDetails200ResponseProductionCountriesInnerToJSON,
    MovieDetails200ResponseProductionCountriesInnerToJSONTyped,
} from './MovieDetails200ResponseProductionCountriesInner';
import type { MovieDetails200ResponseGenresInner } from './MovieDetails200ResponseGenresInner';
import {
    MovieDetails200ResponseGenresInnerFromJSON,
    MovieDetails200ResponseGenresInnerFromJSONTyped,
    MovieDetails200ResponseGenresInnerToJSON,
    MovieDetails200ResponseGenresInnerToJSONTyped,
} from './MovieDetails200ResponseGenresInner';
import type { MovieDetails200ResponseSpokenLanguagesInner } from './MovieDetails200ResponseSpokenLanguagesInner';
import {
    MovieDetails200ResponseSpokenLanguagesInnerFromJSON,
    MovieDetails200ResponseSpokenLanguagesInnerFromJSONTyped,
    MovieDetails200ResponseSpokenLanguagesInnerToJSON,
    MovieDetails200ResponseSpokenLanguagesInnerToJSONTyped,
} from './MovieDetails200ResponseSpokenLanguagesInner';

/**
 * 
 * @export
 * @interface MovieDetails200Response
 */
export interface MovieDetails200Response {
    /**
     * 
     * @type {boolean}
     * @memberof MovieDetails200Response
     */
    adult?: boolean;
    /**
     * 
     * @type {string}
     * @memberof MovieDetails200Response
     */
    backdropPath?: string;
    /**
     * 
     * @type {any}
     * @memberof MovieDetails200Response
     */
    belongsToCollection?: any | null;
    /**
     * 
     * @type {number}
     * @memberof MovieDetails200Response
     */
    budget?: number;
    /**
     * 
     * @type {Array<MovieDetails200ResponseGenresInner>}
     * @memberof MovieDetails200Response
     */
    genres?: Array<MovieDetails200ResponseGenresInner>;
    /**
     * 
     * @type {string}
     * @memberof MovieDetails200Response
     */
    homepage?: string;
    /**
     * 
     * @type {number}
     * @memberof MovieDetails200Response
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof MovieDetails200Response
     */
    imdbId?: string;
    /**
     * 
     * @type {string}
     * @memberof MovieDetails200Response
     */
    originalLanguage?: string;
    /**
     * 
     * @type {string}
     * @memberof MovieDetails200Response
     */
    originalTitle?: string;
    /**
     * 
     * @type {string}
     * @memberof MovieDetails200Response
     */
    overview?: string;
    /**
     * 
     * @type {number}
     * @memberof MovieDetails200Response
     */
    popularity?: number;
    /**
     * 
     * @type {string}
     * @memberof MovieDetails200Response
     */
    posterPath?: string;
    /**
     * 
     * @type {Array<MovieDetails200ResponseProductionCompaniesInner>}
     * @memberof MovieDetails200Response
     */
    productionCompanies?: Array<MovieDetails200ResponseProductionCompaniesInner>;
    /**
     * 
     * @type {Array<MovieDetails200ResponseProductionCountriesInner>}
     * @memberof MovieDetails200Response
     */
    productionCountries?: Array<MovieDetails200ResponseProductionCountriesInner>;
    /**
     * 
     * @type {string}
     * @memberof MovieDetails200Response
     */
    releaseDate?: string;
    /**
     * 
     * @type {number}
     * @memberof MovieDetails200Response
     */
    revenue?: number;
    /**
     * 
     * @type {number}
     * @memberof MovieDetails200Response
     */
    runtime?: number;
    /**
     * 
     * @type {Array<MovieDetails200ResponseSpokenLanguagesInner>}
     * @memberof MovieDetails200Response
     */
    spokenLanguages?: Array<MovieDetails200ResponseSpokenLanguagesInner>;
    /**
     * 
     * @type {string}
     * @memberof MovieDetails200Response
     */
    status?: string;
    /**
     * 
     * @type {string}
     * @memberof MovieDetails200Response
     */
    tagline?: string;
    /**
     * 
     * @type {string}
     * @memberof MovieDetails200Response
     */
    title?: string;
    /**
     * 
     * @type {boolean}
     * @memberof MovieDetails200Response
     */
    video?: boolean;
    /**
     * 
     * @type {number}
     * @memberof MovieDetails200Response
     */
    voteAverage?: number;
    /**
     * 
     * @type {number}
     * @memberof MovieDetails200Response
     */
    voteCount?: number;
}

/**
 * Check if a given object implements the MovieDetails200Response interface.
 */
export function instanceOfMovieDetails200Response(value: object): value is MovieDetails200Response {
    return true;
}

export function MovieDetails200ResponseFromJSON(json: any): MovieDetails200Response {
    return MovieDetails200ResponseFromJSONTyped(json, false);
}

export function MovieDetails200ResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): MovieDetails200Response {
    if (json == null) {
        return json;
    }
    return {
        
        'adult': json['adult'] == null ? undefined : json['adult'],
        'backdropPath': json['backdrop_path'] == null ? undefined : json['backdrop_path'],
        'belongsToCollection': json['belongs_to_collection'] == null ? undefined : json['belongs_to_collection'],
        'budget': json['budget'] == null ? undefined : json['budget'],
        'genres': json['genres'] == null ? undefined : ((json['genres'] as Array<any>).map(MovieDetails200ResponseGenresInnerFromJSON)),
        'homepage': json['homepage'] == null ? undefined : json['homepage'],
        'id': json['id'] == null ? undefined : json['id'],
        'imdbId': json['imdb_id'] == null ? undefined : json['imdb_id'],
        'originalLanguage': json['original_language'] == null ? undefined : json['original_language'],
        'originalTitle': json['original_title'] == null ? undefined : json['original_title'],
        'overview': json['overview'] == null ? undefined : json['overview'],
        'popularity': json['popularity'] == null ? undefined : json['popularity'],
        'posterPath': json['poster_path'] == null ? undefined : json['poster_path'],
        'productionCompanies': json['production_companies'] == null ? undefined : ((json['production_companies'] as Array<any>).map(MovieDetails200ResponseProductionCompaniesInnerFromJSON)),
        'productionCountries': json['production_countries'] == null ? undefined : ((json['production_countries'] as Array<any>).map(MovieDetails200ResponseProductionCountriesInnerFromJSON)),
        'releaseDate': json['release_date'] == null ? undefined : json['release_date'],
        'revenue': json['revenue'] == null ? undefined : json['revenue'],
        'runtime': json['runtime'] == null ? undefined : json['runtime'],
        'spokenLanguages': json['spoken_languages'] == null ? undefined : ((json['spoken_languages'] as Array<any>).map(MovieDetails200ResponseSpokenLanguagesInnerFromJSON)),
        'status': json['status'] == null ? undefined : json['status'],
        'tagline': json['tagline'] == null ? undefined : json['tagline'],
        'title': json['title'] == null ? undefined : json['title'],
        'video': json['video'] == null ? undefined : json['video'],
        'voteAverage': json['vote_average'] == null ? undefined : json['vote_average'],
        'voteCount': json['vote_count'] == null ? undefined : json['vote_count'],
    };
}

export function MovieDetails200ResponseToJSON(json: any): MovieDetails200Response {
    return MovieDetails200ResponseToJSONTyped(json, false);
}

export function MovieDetails200ResponseToJSONTyped(value?: MovieDetails200Response | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'adult': value['adult'],
        'backdrop_path': value['backdropPath'],
        'belongs_to_collection': value['belongsToCollection'],
        'budget': value['budget'],
        'genres': value['genres'] == null ? undefined : ((value['genres'] as Array<any>).map(MovieDetails200ResponseGenresInnerToJSON)),
        'homepage': value['homepage'],
        'id': value['id'],
        'imdb_id': value['imdbId'],
        'original_language': value['originalLanguage'],
        'original_title': value['originalTitle'],
        'overview': value['overview'],
        'popularity': value['popularity'],
        'poster_path': value['posterPath'],
        'production_companies': value['productionCompanies'] == null ? undefined : ((value['productionCompanies'] as Array<any>).map(MovieDetails200ResponseProductionCompaniesInnerToJSON)),
        'production_countries': value['productionCountries'] == null ? undefined : ((value['productionCountries'] as Array<any>).map(MovieDetails200ResponseProductionCountriesInnerToJSON)),
        'release_date': value['releaseDate'],
        'revenue': value['revenue'],
        'runtime': value['runtime'],
        'spoken_languages': value['spokenLanguages'] == null ? undefined : ((value['spokenLanguages'] as Array<any>).map(MovieDetails200ResponseSpokenLanguagesInnerToJSON)),
        'status': value['status'],
        'tagline': value['tagline'],
        'title': value['title'],
        'video': value['video'],
        'vote_average': value['voteAverage'],
        'vote_count': value['voteCount'],
    };
}

